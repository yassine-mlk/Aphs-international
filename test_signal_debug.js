// =========================================
// DIAGNOSTIC SIGNALS WEBRTC - POUR L'AUTRE PARTICIPANT
// Script √† ex√©cuter sur l'autre participant qui ne re√ßoit pas les signaux
// =========================================

console.log('üîç Diagnostic des signaux WebRTC - Participant qui ne re√ßoit pas...');

// =========================================
// 1. V√âRIFICATION DES VARIABLES D'ENVIRONNEMENT
// =========================================

console.log('üîß Variables d\'environnement:');
console.log('VITE_USE_REALTIME:', import.meta.env?.VITE_USE_REALTIME);
console.log('VITE_USE_ROBUST_VIDEO_CONFERENCE:', import.meta.env?.VITE_USE_ROBUST_VIDEO_CONFERENCE);
console.log('VITE_SUPABASE_URL:', import.meta.env?.VITE_SUPABASE_URL);

if (!import.meta.env?.VITE_USE_REALTIME || import.meta.env?.VITE_USE_REALTIME !== 'true') {
  console.error('‚ùå VITE_USE_REALTIME n\'est pas activ√©!');
  console.log('üí° Ajoutez VITE_USE_REALTIME=true dans votre .env.local');
}

if (!import.meta.env?.VITE_USE_ROBUST_VIDEO_CONFERENCE || import.meta.env?.VITE_USE_ROBUST_VIDEO_CONFERENCE !== 'true') {
  console.error('‚ùå VITE_USE_ROBUST_VIDEO_CONFERENCE n\'est pas activ√©!');
  console.log('üí° Ajoutez VITE_USE_ROBUST_VIDEO_CONFERENCE=true dans votre .env.local');
}

// =========================================
// 2. V√âRIFICATION DE SUPABASE
// =========================================

if (typeof window.supabase === 'undefined') {
  console.error('‚ùå Client Supabase non disponible!');
  console.log('üí° V√©rifiez que Supabase est correctement initialis√©');
} else {
  console.log('‚úÖ Client Supabase disponible');
  console.log('URL:', window.supabase.supabaseUrl);
  
  // Test de connexion Supabase
  window.supabase.from('video_meetings').select('count').limit(1)
    .then(({ data, error }) => {
      if (error) {
        console.error('‚ùå Erreur de connexion Supabase:', error);
      } else {
        console.log('‚úÖ Connexion Supabase OK');
      }
    })
    .catch(error => {
      console.error('‚ùå Erreur de test Supabase:', error);
    });
}

// =========================================
// 3. V√âRIFICATION DES CANAUX REALTIME
// =========================================

function checkRealtimeChannels() {
  console.log('üì° V√©rification des canaux Realtime...');
  
  if (!window.supabase) {
    console.log('‚ùå Supabase non disponible pour les canaux');
    return;
  }
  
  // V√©rifier si nous sommes dans une vid√©oconf√©rence
  const videoElements = document.querySelectorAll('video');
  console.log(`üìπ √âl√©ments vid√©o trouv√©s: ${videoElements.length}`);
  
  if (videoElements.length === 0) {
    console.log('‚ùå Pas d\'√©l√©ments vid√©o - pas dans une vid√©oconf√©rence');
    return;
  }
  
  // Chercher les logs de connexion
  console.log('üìù V√©rifiez ces logs dans la console:');
  console.log('- ‚úÖ Canal Supabase souscrit');
  console.log('- ‚úÖ Pr√©sence envoy√©e dans la room');
  console.log('- ‚úÖ Connected to video room');
  console.log('- üì® Signal WebRTC re√ßu');
  
  // Test de cr√©ation d'un canal
  try {
    const testChannel = window.supabase.channel('test_debug_channel', {
      config: {
        broadcast: { self: false, ack: false },
        presence: { key: `debug_${Date.now()}` }
      }
    });
    
    console.log('‚úÖ Test de cr√©ation de canal r√©ussi');
    
    // √âcouter les signaux
    testChannel.on('broadcast', { event: 'webrtc-signal' }, ({ payload }) => {
      console.log('üì® Signal de test re√ßu:', payload);
    });
    
    // S'abonner
    testChannel.subscribe()
      .then(() => {
        console.log('‚úÖ Test d\'abonnement au canal r√©ussi');
        
        // Envoyer un signal de test
        return testChannel.send({
          type: 'webrtc-signal',
          payload: {
            signal: { type: 'test', data: 'debug' },
            from: `debug_${Date.now()}`,
            to: 'all',
            timestamp: new Date().toISOString()
          }
        });
      })
      .then(() => {
        console.log('‚úÖ Test d\'envoi de signal r√©ussi');
        
        // Se d√©sabonner apr√®s 2 secondes
        setTimeout(() => {
          testChannel.unsubscribe();
          console.log('üõë Canal de test ferm√©');
        }, 2000);
      })
      .catch(error => {
        console.error('‚ùå Erreur test canal:', error);
      });
    
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation canal de test:', error);
  }
}

// =========================================
// 4. V√âRIFICATION DES LOGS DE R√âCEPTION
// =========================================

function checkReceptionLogs() {
  console.log('üì® V√©rification des logs de r√©ception...');
  
  // Chercher les logs dans la console
  console.log('üîç Cherchez ces logs dans la console:');
  console.log('- üì® Signal WebRTC re√ßu');
  console.log('- üì• Processing offer from');
  console.log('- üì• Processing answer from');
  console.log('- üì• Processing ice-candidate from');
  
  // Si aucun de ces logs n'appara√Æt, le probl√®me est la r√©ception
  console.log('üí° Si vous ne voyez AUCUN de ces logs, le probl√®me est:');
  console.log('1. Variables d\'environnement manquantes');
  console.log('2. Canal Supabase non connect√©');
  console.log('3. Probl√®me de r√©seau/Realtime');
}

// =========================================
// 5. FONCTIONS UTILITAIRES
// =========================================

// Forcer la reconnexion
window.forceReconnectVideo = () => {
  console.log('üîÑ For√ßage de la reconnexion vid√©o...');
  window.location.reload();
};

// Afficher l'√©tat complet
window.showVideoState = () => {
  console.log('üìä √âtat complet de la vid√©oconf√©rence...');
  
  // Variables d'environnement
  console.log('üîß Variables:');
  console.log('- VITE_USE_REALTIME:', import.meta.env?.VITE_USE_REALTIME);
  console.log('- VITE_USE_ROBUST_VIDEO_CONFERENCE:', import.meta.env?.VITE_USE_ROBUST_VIDEO_CONFERENCE);
  
  // Supabase
  if (window.supabase) {
    console.log('‚úÖ Supabase: OK');
  } else {
    console.log('‚ùå Supabase: NON DISPONIBLE');
  }
  
  // √âl√©ments vid√©o
  const videos = document.querySelectorAll('video');
  console.log(`üìπ Vid√©os: ${videos.length}`);
  
  // Participants
  const participants = document.querySelectorAll('[class*="participant"]');
  console.log(`üë§ Participants: ${participants.length}`);
  
  // Conseils
  console.log('üí° Solutions possibles:');
  console.log('1. V√©rifiez .env.local avec VITE_USE_REALTIME=true');
  console.log('2. Red√©marrez le serveur de d√©veloppement');
  console.log('3. V√©rifiez la connexion internet');
  console.log('4. V√©rifiez les logs de Supabase Realtime');
};

// =========================================
// 6. EX√âCUTION AUTOMATIQUE
// =========================================

function runCompleteDiagnostic() {
  console.log('üöÄ Diagnostic complet des signaux...');
  
  checkRealtimeChannels();
  checkReceptionLogs();
  
  console.log('‚úÖ Diagnostic termin√©. Utilisez:');
  console.log('- forceReconnectVideo() pour recharger');
  console.log('- showVideoState() pour voir l\'√©tat complet');
}

// Ex√©cuter le diagnostic
runCompleteDiagnostic();

console.log('üîç Script de diagnostic des signaux charg√©.'); 