// =========================================
// TEST R√âCEPTION DES SIGNALS - POUR L'AUTRE PARTICIPANT
// Script √† ex√©cuter sur l'autre participant qui ne re√ßoit pas les signaux
// =========================================

console.log('üîç Test de r√©ception des signaux - Participant qui ne re√ßoit pas...');

// =========================================
// 1. V√âRIFICATION DES VARIABLES D'ENVIRONNEMENT
// =========================================

console.log('üîß Variables d\'environnement:');
console.log('VITE_USE_REALTIME:', import.meta.env?.VITE_USE_REALTIME);
console.log('VITE_USE_ROBUST_VIDEO_CONFERENCE:', import.meta.env?.VITE_USE_ROBUST_VIDEO_CONFERENCE);

if (!import.meta.env?.VITE_USE_REALTIME || import.meta.env?.VITE_USE_REALTIME !== 'true') {
  console.error('‚ùå VITE_USE_REALTIME n\'est pas activ√©!');
  console.log('üí° Ajoutez VITE_USE_REALTIME=true dans votre .env.local');
}

if (!import.meta.env?.VITE_USE_ROBUST_VIDEO_CONFERENCE || import.meta.env?.VITE_USE_ROBUST_VIDEO_CONFERENCE !== 'true') {
  console.error('‚ùå VITE_USE_ROBUST_VIDEO_CONFERENCE n\'est pas activ√©!');
  console.log('üí° Ajoutez VITE_USE_ROBUST_VIDEO_CONFERENCE=true dans votre .env.local');
}

// =========================================
// 2. V√âRIFICATION DE SUPABASE
// =========================================

if (typeof window.supabase === 'undefined') {
  console.error('‚ùå Client Supabase non disponible!');
  console.log('üí° V√©rifiez que Supabase est correctement initialis√©');
} else {
  console.log('‚úÖ Client Supabase disponible');
  console.log('URL:', window.supabase.supabaseUrl);
}

// =========================================
// 3. V√âRIFICATION DES LOGS DE CONNEXION
// =========================================

console.log('üìù V√©rifiez ces logs dans la console:');
console.log('- ‚úÖ Canal Supabase souscrit');
console.log('- ‚úÖ Pr√©sence envoy√©e dans la room');
console.log('- ‚úÖ Connected to video room');
console.log('- üì® Signal WebRTC re√ßu');

// =========================================
// 4. TEST DE RECONNEXION
// =========================================

console.log('üîÑ Test de reconnexion...');

if (typeof window.forceVideoReconnect === 'function') {
  console.log('‚úÖ Fonction de reconnexion disponible');
  console.log('üí° Utilisez forceVideoReconnect() pour forcer la reconnexion');
} else {
  console.log('‚ùå Fonction de reconnexion non disponible');
}

// =========================================
// 5. TEST DE CANAL SUPABASE
// =========================================

async function testSupabaseChannel() {
  console.log('üì° Test de canal Supabase...');
  
  if (!window.supabase) {
    console.log('‚ùå Supabase non disponible');
    return;
  }
  
  try {
    // Cr√©er un canal de test
    const testChannel = window.supabase.channel('test_reception_channel', {
      config: {
        broadcast: { self: false, ack: false },
        presence: { key: `test_${Date.now()}` }
      }
    });
    
    console.log('‚úÖ Canal de test cr√©√©');
    
    // √âcouter les signaux
    testChannel.on('broadcast', { event: 'webrtc-signal' }, ({ payload }) => {
      console.log('üì® Signal de test re√ßu:', payload);
    });
    
    // S'abonner
    await testChannel.subscribe();
    console.log('‚úÖ Abonnement au canal r√©ussi');
    
    // Envoyer un signal de test
    const testSignal = {
      type: 'webrtc-signal',
      payload: {
        signal: { type: 'test', data: 'reception_test' },
        from: `test_${Date.now()}`,
        to: 'broadcast',
        timestamp: new Date().toISOString()
      }
    };
    
    console.log('üì§ Envoi d\'un signal de test:', testSignal);
    
    await testChannel.send(testSignal);
    console.log('‚úÖ Signal de test envoy√©');
    
    // Attendre un peu puis se d√©sabonner
    setTimeout(() => {
      testChannel.unsubscribe();
      console.log('üõë Canal de test ferm√©');
    }, 3000);
    
  } catch (error) {
    console.error('‚ùå Erreur test canal:', error);
  }
}

// =========================================
// 6. FONCTIONS UTILITAIRES
// =========================================

// Forcer la reconnexion
window.forceReconnectTest = () => {
  console.log('üîÑ For√ßage de la reconnexion...');
  if (typeof window.forceVideoReconnect === 'function') {
    window.forceVideoReconnect();
  } else {
    console.log('‚ùå Fonction de reconnexion non disponible');
    window.location.reload();
  }
};

// Afficher l'√©tat complet
window.showReceptionState = () => {
  console.log('üìä √âtat de r√©ception...');
  
  // Variables d'environnement
  console.log('üîß Variables:');
  console.log('- VITE_USE_REALTIME:', import.meta.env?.VITE_USE_REALTIME);
  console.log('- VITE_USE_ROBUST_VIDEO_CONFERENCE:', import.meta.env?.VITE_USE_ROBUST_VIDEO_CONFERENCE);
  
  // Supabase
  if (window.supabase) {
    console.log('‚úÖ Supabase: OK');
  } else {
    console.log('‚ùå Supabase: NON DISPONIBLE');
  }
  
  // √âl√©ments vid√©o
  const videos = document.querySelectorAll('video');
  console.log(`üìπ Vid√©os: ${videos.length}`);
  
  // Conseils
  console.log('üí° Solutions possibles:');
  console.log('1. V√©rifiez .env.local avec VITE_USE_REALTIME=true');
  console.log('2. Utilisez forceReconnectTest() pour recharger');
  console.log('3. V√©rifiez la connexion internet');
  console.log('4. V√©rifiez les logs de Supabase Realtime');
};

// =========================================
// 7. EX√âCUTION AUTOMATIQUE
// =========================================

async function runReceptionTests() {
  console.log('üöÄ Tests de r√©ception...');
  
  await testSupabaseChannel();
  
  console.log('‚úÖ Tests termin√©s. Utilisez:');
  console.log('- forceReconnectTest() pour recharger');
  console.log('- showReceptionState() pour voir l\'√©tat');
}

// Ex√©cuter les tests
runReceptionTests();

console.log('üîç Script de test de r√©ception charg√©.'); 