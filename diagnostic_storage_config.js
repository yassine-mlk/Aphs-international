// Script de diagnostic pour v√©rifier la configuration du stockage Supabase
// √Ä ex√©cuter dans la console du navigateur

console.log('üîç Diagnostic de la configuration du stockage Supabase...');

// Fonction pour tester la configuration du bucket
async function testBucketConfiguration() {
  console.log('\nüì¶ Test de la configuration du bucket task_submissions...');
  
  try {
    // 1. V√©rifier si le bucket existe
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error('‚ùå Erreur lors de la v√©rification des buckets:', bucketsError);
      return false;
    }
    
    const taskSubmissionsBucket = buckets.find(b => b.name === 'task_submissions');
    
    if (!taskSubmissionsBucket) {
      console.error('‚ùå Le bucket task_submissions n\'existe pas');
      return false;
    }
    
    console.log('‚úÖ Bucket task_submissions trouv√©');
    console.log('üìã Configuration du bucket:', {
      id: taskSubmissionsBucket.id,
      name: taskSubmissionsBucket.name,
      public: taskSubmissionsBucket.public,
      fileSizeLimit: taskSubmissionsBucket.file_size_limit,
      allowedMimeTypes: taskSubmissionsBucket.allowed_mime_types
    });
    
    // 2. V√©rifier les types MIME autoris√©s
    if (!taskSubmissionsBucket.allowed_mime_types || 
        !taskSubmissionsBucket.allowed_mime_types.includes('*/*')) {
      console.warn('‚ö†Ô∏è  Le bucket n\'accepte pas tous les types MIME');
      console.log('Types autoris√©s:', taskSubmissionsBucket.allowed_mime_types);
    } else {
      console.log('‚úÖ Le bucket accepte tous les types MIME');
    }
    
    // 3. V√©rifier la limite de taille
    if (taskSubmissionsBucket.file_size_limit < 52428800) { // 50MB
      console.warn('‚ö†Ô∏è  La limite de taille est inf√©rieure √† 50MB');
      console.log('Limite actuelle:', Math.round(taskSubmissionsBucket.file_size_limit / (1024 * 1024)), 'MB');
    } else {
      console.log('‚úÖ La limite de taille est suffisante pour les fichiers AutoCAD');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors du test de configuration:', error);
    return false;
  }
}

// Fonction pour tester l'upload d'un fichier factice
async function testFileUpload() {
  console.log('\nüì§ Test d\'upload de fichier factice...');
  
  try {
    // Cr√©er un fichier factice DWG
    const testContent = 'Test AutoCAD file content';
    const testFile = new File([testContent], 'test.dwg', { 
      type: 'application/acad' 
    });
    
    console.log('üìù Fichier de test cr√©√©:', {
      name: testFile.name,
      size: testFile.size,
      type: testFile.type
    });
    
    // Test d'upload direct
    const fileName = `test_upload_${Date.now()}.dwg`;
    console.log('üì§ Tentative d\'upload direct...');
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('task_submissions')
      .upload(fileName, testFile, {
        contentType: 'application/acad',
        cacheControl: '3600',
        upsert: false
      });
    
    if (uploadError) {
      console.error('‚ùå Erreur d\'upload direct:', uploadError);
      
      // Test avec URL sign√©e
      console.log('üîÑ Tentative avec URL sign√©e...');
      const { data: signedURLData, error: signedURLError } = await supabase.storage
        .from('task_submissions')
        .createSignedUploadUrl(fileName);
      
      if (signedURLError) {
        console.error('‚ùå Erreur URL sign√©e:', signedURLError);
        return false;
      }
      
      console.log('‚úÖ URL sign√©e cr√©√©e avec succ√®s');
      
      // Upload avec l'URL sign√©e
      const uploadResponse = await fetch(signedURLData.signedUrl, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/acad',
        },
        body: testFile,
      });
      
      if (!uploadResponse.ok) {
        const errorText = await uploadResponse.text();
        console.error('‚ùå Erreur upload avec URL sign√©e:', uploadResponse.status, errorText);
        return false;
      }
      
      console.log('‚úÖ Upload avec URL sign√©e r√©ussi');
      
      // Obtenir l'URL publique
      const { data: urlData } = supabase.storage
        .from('task_submissions')
        .getPublicUrl(signedURLData.path);
      
      console.log('üîó URL publique:', urlData.publicUrl);
      
      // Test d'acc√®s au fichier
      const accessResponse = await fetch(urlData.publicUrl);
      if (accessResponse.ok) {
        console.log('‚úÖ Acc√®s au fichier r√©ussi');
      } else {
        console.error('‚ùå Erreur d\'acc√®s au fichier:', accessResponse.status);
      }
      
    } else {
      console.log('‚úÖ Upload direct r√©ussi');
      
      // Obtenir l'URL publique
      const { data: urlData } = supabase.storage
        .from('task_submissions')
        .getPublicUrl(uploadData.path);
      
      console.log('üîó URL publique:', urlData.publicUrl);
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors du test d\'upload:', error);
    return false;
  }
}

// Fonction pour tester les politiques RLS
async function testRLSPolicies() {
  console.log('\nüîí Test des politiques RLS...');
  
  try {
    // Test de lecture des fichiers
    const { data: files, error: listError } = await supabase.storage
      .from('task_submissions')
      .list('', { limit: 5 });
    
    if (listError) {
      console.error('‚ùå Erreur lors de la lecture des fichiers:', listError);
      return false;
    }
    
    console.log('‚úÖ Lecture des fichiers autoris√©e');
    console.log('üìÅ Fichiers trouv√©s:', files?.length || 0);
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors du test RLS:', error);
    return false;
  }
}

// Fonction principale de diagnostic
async function runDiagnostic() {
  console.log('üöÄ D√©marrage du diagnostic complet...');
  
  const results = {
    bucketConfig: false,
    fileUpload: false,
    rlsPolicies: false
  };
  
  // Test 1: Configuration du bucket
  results.bucketConfig = await testBucketConfiguration();
  
  // Test 2: Upload de fichiers
  if (results.bucketConfig) {
    results.fileUpload = await testFileUpload();
  }
  
  // Test 3: Politiques RLS
  results.rlsPolicies = await testRLSPolicies();
  
  // R√©sum√©
  console.log('\nüìä R√©sum√© du diagnostic:');
  console.log('‚úÖ Configuration du bucket:', results.bucketConfig ? 'OK' : '√âCHEC');
  console.log('‚úÖ Upload de fichiers:', results.fileUpload ? 'OK' : '√âCHEC');
  console.log('‚úÖ Politiques RLS:', results.rlsPolicies ? 'OK' : '√âCHEC');
  
  if (results.bucketConfig && results.fileUpload && results.rlsPolicies) {
    console.log('\nüéâ Tous les tests sont pass√©s ! Le stockage est correctement configur√©.');
  } else {
    console.log('\n‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration Supabase.');
    
    if (!results.bucketConfig) {
      console.log('üí° Solution: Ex√©cutez le script configure_task_submissions_bucket.sql');
    }
    
    if (!results.fileUpload) {
      console.log('üí° Solution: V√©rifiez les types MIME autoris√©s et les limites de taille');
    }
    
    if (!results.rlsPolicies) {
      console.log('üí° Solution: V√©rifiez les politiques RLS du bucket');
    }
  }
  
  return results;
}

// Exporter les fonctions pour utilisation
window.storageDiagnostic = {
  runDiagnostic,
  testBucketConfiguration,
  testFileUpload,
  testRLSPolicies
};

console.log('üìã Script de diagnostic charg√©. Utilisez storageDiagnostic.runDiagnostic() pour d√©marrer.'); 