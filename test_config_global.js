// =========================================
// TEST CONFIGURATION GLOBALE
// Script pour v√©rifier que la configuration est bien charg√©e
// =========================================

console.log('üîß Test de la configuration globale...');

// =========================================
// 1. V√âRIFICATION DE LA CONFIGURATION GLOBALE
// =========================================

if (window.VIDEO_CONFERENCE_CONFIG) {
  console.log('‚úÖ Configuration globale disponible:', window.VIDEO_CONFERENCE_CONFIG);
  
  // V√©rifier les variables importantes
  console.log('üìã Variables importantes:');
  console.log('- VITE_USE_REALTIME:', window.VIDEO_CONFERENCE_CONFIG.VITE_USE_REALTIME);
  console.log('- VITE_USE_ROBUST_VIDEO_CONFERENCE:', window.VIDEO_CONFERENCE_CONFIG.VITE_USE_ROBUST_VIDEO_CONFERENCE);
  console.log('- VITE_SUPABASE_URL:', window.VIDEO_CONFERENCE_CONFIG.VITE_SUPABASE_URL);
  console.log('- VITE_SUPABASE_ANON_KEY:', window.VIDEO_CONFERENCE_CONFIG.VITE_SUPABASE_ANON_KEY ? '‚úÖ Disponible' : '‚ùå Manquante');
} else {
  console.error('‚ùå Configuration globale non disponible!');
  console.log('üí° V√©rifiez que le fichier /config.js est bien charg√©');
}

// =========================================
// 2. V√âRIFICATION DE SUPABASE
// =========================================

if (window.supabase) {
  console.log('‚úÖ Client Supabase disponible');
  console.log('URL:', window.supabase.supabaseUrl);
  
  // Test de connexion Supabase
  window.supabase.from('video_meetings').select('count').limit(1)
    .then(({ data, error }) => {
      if (error) {
        console.error('‚ùå Erreur de connexion Supabase:', error);
      } else {
        console.log('‚úÖ Connexion Supabase OK');
      }
    })
    .catch(error => {
      console.error('‚ùå Erreur de test Supabase:', error);
    });
} else {
  console.error('‚ùå Client Supabase non disponible!');
  console.log('üí° V√©rifiez que Supabase est correctement initialis√©');
}

// =========================================
// 3. V√âRIFICATION DES VARIABLES D'ENVIRONNEMENT
// =========================================

console.log('üîß Variables d\'environnement Vite:');
console.log('- VITE_USE_REALTIME:', import.meta.env?.VITE_USE_REALTIME);
console.log('- VITE_USE_ROBUST_VIDEO_CONFERENCE:', import.meta.env?.VITE_USE_ROBUST_VIDEO_CONFERENCE);
console.log('- VITE_SUPABASE_URL:', import.meta.env?.VITE_SUPABASE_URL);

// =========================================
// 4. TEST DE CONFIGURATION CENTRALIS√âE
// =========================================

// V√©rifier si la configuration centralis√©e est disponible
if (typeof window !== 'undefined' && window.config) {
  console.log('‚úÖ Configuration centralis√©e disponible:', window.config);
} else {
  console.log('‚ÑπÔ∏è Configuration centralis√©e non expos√©e globalement');
}

// =========================================
// 5. FONCTIONS UTILITAIRES
// =========================================

// Fonction pour forcer la reconnexion
window.forceReconnectGlobal = () => {
  console.log('üîÑ For√ßage de la reconnexion...');
  if (typeof window.forceVideoReconnect === 'function') {
    window.forceVideoReconnect();
  } else {
    console.log('‚ùå Fonction de reconnexion non disponible');
    window.location.reload();
  }
};

// Fonction pour afficher l'√©tat complet
window.showGlobalState = () => {
  console.log('üìä √âtat global...');
  
  // Configuration globale
  if (window.VIDEO_CONFERENCE_CONFIG) {
    console.log('‚úÖ Configuration globale: OK');
  } else {
    console.log('‚ùå Configuration globale: NON DISPONIBLE');
  }
  
  // Supabase
  if (window.supabase) {
    console.log('‚úÖ Supabase: OK');
  } else {
    console.log('‚ùå Supabase: NON DISPONIBLE');
  }
  
  // Variables d'environnement
  console.log('üîß Variables Vite:');
  console.log('- VITE_USE_REALTIME:', import.meta.env?.VITE_USE_REALTIME);
  console.log('- VITE_USE_ROBUST_VIDEO_CONFERENCE:', import.meta.env?.VITE_USE_ROBUST_VIDEO_CONFERENCE);
  
  // Conseils
  console.log('üí° Solutions possibles:');
  console.log('1. V√©rifiez que /config.js est bien charg√©');
  console.log('2. Utilisez forceReconnectGlobal() pour recharger');
  console.log('3. V√©rifiez la console pour les erreurs');
};

// =========================================
// 6. EX√âCUTION AUTOMATIQUE
// =========================================

console.log('‚úÖ Test de configuration termin√©. Utilisez:');
console.log('- forceReconnectGlobal() pour recharger');
console.log('- showGlobalState() pour voir l\'√©tat complet');

console.log('üîß Script de test de configuration globale charg√©.'); 