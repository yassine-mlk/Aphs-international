// Test de la vid√©oconf√©rence r√©elle
// Copiez ce script dans la console du navigateur

console.log('üé• Test de la vid√©oconf√©rence r√©elle...');

// Test 1: V√©rifier les APIs WebRTC
console.log('\nüì° Test 1: APIs WebRTC');
console.log('RTCPeerConnection:', typeof RTCPeerConnection !== 'undefined' ? '‚úÖ' : '‚ùå');
console.log('getUserMedia:', typeof navigator.mediaDevices?.getUserMedia !== 'undefined' ? '‚úÖ' : '‚ùå');
console.log('getDisplayMedia:', typeof navigator.mediaDevices?.getDisplayMedia !== 'undefined' ? '‚úÖ' : '‚ùå');
console.log('localStorage:', typeof localStorage !== 'undefined' ? '‚úÖ' : '‚ùå');

// Test 2: Test d'acc√®s cam√©ra avec haute qualit√©
console.log('\nüìπ Test 2: Acc√®s cam√©ra haute qualit√©');
const testHighQualityCamera = async () => {
  try {
    const stream = await navigator.mediaDevices.getUserMedia({
      video: {
        width: { ideal: 1280 },
        height: { ideal: 720 },
        frameRate: { ideal: 30 }
      },
      audio: {
        echoCancellation: true,
        noiseSuppression: true,
        autoGainControl: true
      }
    });
    
    console.log('‚úÖ Cam√©ra haute qualit√© accessible');
    console.log('R√©solution vid√©o:', stream.getVideoTracks()[0]?.getSettings());
    console.log('Param√®tres audio:', stream.getAudioTracks()[0]?.getSettings());
    
    stream.getTracks().forEach(track => track.stop());
    return true;
  } catch (error) {
    console.log('‚ùå Erreur cam√©ra haute qualit√©:', error.message);
    return false;
  }
};

// Test 3: Test RTCPeerConnection avec serveurs STUN
console.log('\nüîó Test 3: RTCPeerConnection avec STUN');
const testPeerConnection = () => {
  try {
    const peer = new RTCPeerConnection({
      iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' },
        { urls: 'stun:stun2.l.google.com:19302' },
        { urls: 'stun:stun3.l.google.com:19302' },
        { urls: 'stun:stun4.l.google.com:19302' }
      ],
      iceCandidatePoolSize: 10
    });
    
    console.log('‚úÖ RTCPeerConnection cr√©√© avec serveurs STUN');
    console.log('Serveurs ICE:', peer.getConfiguration().iceServers?.length || 0);
    peer.close();
    return true;
  } catch (error) {
    console.log('‚ùå Erreur RTCPeerConnection:', error.message);
    return false;
  }
};

// Test 4: Test de signalisation localStorage
console.log('\nüíæ Test 4: Signalisation localStorage');
const testLocalStorageSignaling = () => {
  try {
    const roomId = 'test-room-' + Date.now();
    const storageKey = `video_conference_${roomId}`;
    
    // Simuler un message de signalisation
    const testMessage = {
      type: 'offer',
      from: 'user_test_1',
      to: 'user_test_2',
      fromName: 'Test User 1',
      sdp: {
        type: 'offer',
        sdp: 'v=0\r\no=- 1234567890 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n'
      },
      roomId,
      timestamp: new Date().toISOString()
    };
    
    localStorage.setItem(`${storageKey}_${Date.now()}`, JSON.stringify(testMessage));
    
    // V√©rifier que le message est stock√©
    const keys = Object.keys(localStorage);
    const roomKeys = keys.filter(key => key.startsWith(storageKey));
    
    if (roomKeys.length > 0) {
      console.log('‚úÖ Signalisation localStorage fonctionne');
      console.log('Messages stock√©s:', roomKeys.length);
      
      // Nettoyer
      roomKeys.forEach(key => localStorage.removeItem(key));
      return true;
    } else {
      console.log('‚ùå Signalisation localStorage √©chou√©e');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur signalisation localStorage:', error.message);
    return false;
  }
};

// Test 5: Test de performance WebRTC
console.log('\n‚ö° Test 5: Performance WebRTC');
const testWebRTCPerformance = async () => {
  try {
    const startTime = performance.now();
    
    // Cr√©er plusieurs connexions peer
    const peers = [];
    for (let i = 0; i < 3; i++) {
      const peer = new RTCPeerConnection({
        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
      });
      peers.push(peer);
    }
    
    const endTime = performance.now();
    console.log(`‚úÖ Cr√©ation de ${peers.length} connexions peer: ${(endTime - startTime).toFixed(2)}ms`);
    
    // Nettoyer
    peers.forEach(peer => peer.close());
    return true;
  } catch (error) {
    console.log('‚ùå Erreur performance WebRTC:', error.message);
    return false;
  }
};

// Test 6: Test de compatibilit√© navigateur
console.log('\nüåê Test 6: Compatibilit√© navigateur');
const testBrowserCompatibility = () => {
  const tests = {
    webrtc: typeof RTCPeerConnection !== 'undefined',
    getUserMedia: typeof navigator.mediaDevices?.getUserMedia !== 'undefined',
    getDisplayMedia: typeof navigator.mediaDevices?.getDisplayMedia !== 'undefined',
    localStorage: typeof localStorage !== 'undefined',
    performance: typeof performance !== 'undefined',
    webAudio: typeof AudioContext !== 'undefined' || typeof webkitAudioContext !== 'undefined'
  };
  
  console.log('Compatibilit√© WebRTC:', tests.webrtc ? '‚úÖ' : '‚ùå');
  console.log('Compatibilit√© getUserMedia:', tests.getUserMedia ? '‚úÖ' : '‚ùå');
  console.log('Compatibilit√© getDisplayMedia:', tests.getDisplayMedia ? '‚úÖ' : '‚ùå');
  console.log('Compatibilit√© localStorage:', tests.localStorage ? '‚úÖ' : '‚ùå');
  console.log('Compatibilit√© Performance API:', tests.performance ? '‚úÖ' : '‚ùå');
  console.log('Compatibilit√© Web Audio:', tests.webAudio ? '‚úÖ' : '‚ùå');
  
  return Object.values(tests).every(test => test);
};

// Ex√©cuter tous les tests
const runRealVideoTests = async () => {
  console.log('\nüöÄ Ex√©cution des tests vid√©oconf√©rence r√©elle...\n');
  
  const results = {
    webrtc: typeof RTCPeerConnection !== 'undefined',
    camera: await testHighQualityCamera(),
    peerConnection: testPeerConnection(),
    signaling: testLocalStorageSignaling(),
    performance: await testWebRTCPerformance(),
    compatibility: testBrowserCompatibility()
  };
  
  console.log('\nüìä R√©sultats des tests:');
  console.log('WebRTC APIs:', results.webrtc ? '‚úÖ' : '‚ùå');
  console.log('Cam√©ra haute qualit√©:', results.camera ? '‚úÖ' : '‚ùå');
  console.log('RTCPeerConnection STUN:', results.peerConnection ? '‚úÖ' : '‚ùå');
  console.log('Signalisation localStorage:', results.signaling ? '‚úÖ' : '‚ùå');
  console.log('Performance WebRTC:', results.performance ? '‚úÖ' : '‚ùå');
  console.log('Compatibilit√© navigateur:', results.compatibility ? '‚úÖ' : '‚ùå');
  
  const allPassed = Object.values(results).every(result => result);
  
  if (allPassed) {
    console.log('\nüéâ Tous les tests pass√©s ! La vid√©oconf√©rence r√©elle est pr√™te.');
    console.log('\nüìù Instructions pour tester la vid√©oconf√©rence r√©elle:');
    console.log('1. Allez dans Vid√©oconf√©rence dans votre application');
    console.log('2. Cr√©ez une r√©union (notez l\'ID de la room)');
    console.log('3. Ouvrez un autre onglet/onglet priv√©');
    console.log('4. Rejoignez la m√™me r√©union avec un autre nom d\'utilisateur');
    console.log('5. Vous devriez voir et entendre l\'autre participant');
    console.log('\nüí° Fonctionnalit√©s disponibles:');
    console.log('- Vid√©o/Audio en temps r√©el');
    console.log('- Chat int√©gr√©');
    console.log('- Partage d\'√©cran');
    console.log('- Contr√¥les audio/vid√©o');
    console.log('- Connexion peer-to-peer via WebRTC');
  } else {
    console.log('\n‚ö†Ô∏è Certains tests ont √©chou√©.');
    if (!results.camera) {
      console.log('- Accordez les permissions cam√©ra/microphone');
    }
    if (!results.webrtc) {
      console.log('- Votre navigateur ne supporte pas WebRTC');
    }
    if (!results.signaling) {
      console.log('- localStorage n\'est pas disponible');
    }
  }
  
  return results;
};

// Test de simulation de participants r√©els
const simulateRealParticipants = () => {
  console.log('\nüë• Simulation de participants r√©els...');
  
  const roomId = 'real-test-room-' + Date.now();
  const storageKey = `video_conference_${roomId}`;
  
  // Simuler plusieurs participants qui rejoignent
  const participants = [
    { id: 'user_real_1', name: 'Alice' },
    { id: 'user_real_2', name: 'Bob' },
    { id: 'user_real_3', name: 'Charlie' }
  ];
  
  participants.forEach((participant, index) => {
    setTimeout(() => {
      const joinMessage = {
        type: 'join',
        from: participant.id,
        fromName: participant.name,
        roomId,
        timestamp: new Date().toISOString()
      };
      
      localStorage.setItem(`${storageKey}_${Date.now()}`, JSON.stringify(joinMessage));
      console.log(`‚úÖ ${participant.name} a rejoint la room`);
    }, index * 1000);
  });
  
  // Simuler des messages de chat
  setTimeout(() => {
    const chatMessage = {
      type: 'chat',
      from: 'user_real_1',
      fromName: 'Alice',
      message: 'Bonjour tout le monde ! Comment allez-vous ?',
      roomId,
      timestamp: new Date().toISOString()
    };
    
    localStorage.setItem(`${storageKey}_${Date.now()}`, JSON.stringify(chatMessage));
    console.log('‚úÖ Message de chat simul√©');
  }, 4000);
  
  return roomId;
};

// Instructions
console.log('\nüìã Instructions:');
console.log('1. Ex√©cutez: runRealVideoTests() - pour tester les APIs');
console.log('2. Ex√©cutez: simulateRealParticipants() - pour simuler des participants');
console.log('3. Testez la vid√©oconf√©rence r√©elle avec plusieurs onglets');

// Exporter
window.runRealVideoTests = runRealVideoTests;
window.simulateRealParticipants = simulateRealParticipants;
window.testHighQualityCamera = testHighQualityCamera;
window.testPeerConnection = testPeerConnection;
window.testLocalStorageSignaling = testLocalStorageSignaling;
window.testWebRTCPerformance = testWebRTCPerformance;
window.testBrowserCompatibility = testBrowserCompatibility;

console.log('\n‚úÖ Script de test vid√©oconf√©rence r√©elle charg√©. Ex√©cutez runRealVideoTests() pour commencer.'); 